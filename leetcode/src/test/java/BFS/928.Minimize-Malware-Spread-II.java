package BFS;

import java.util.*;

class Solution928 {
    public int minMalwareSpread(int[][] G, int[] initial) {

        int n=G.length;
        Map<Integer, List<Integer>> graph=new HashMap<>();
        for(int i=0;i<n;i++){
            graph.put(i,new ArrayList<>());
        }

        int[] inDegree=new int[n];
        for(int i=0;i<n;i++){
            for(int j=0;j<n;j++){
                if(G[i][j]==1){
                    graph.get(i).add(j);
                    graph.get(j).add(i);
                }
            }
        }

        //to set smallest index in iteration
        Arrays.sort(initial);

        int min=n,res=-1;
        for(int i:initial){

            int r=bfs(graph,initial,i);
            if(r<min){
                min=r;
                res=i;
            }
        }

        return res;
    }


    private int bfs(Map<Integer,List<Integer>> graph,int[] initial,int i){

        Queue<Integer> q = new LinkedList<>();
        Set<Integer> visit=new HashSet<>();

        int res=0;
        for(int j:initial){
            if(i!=j){
                q.offer(j);
                visit.add(j);
            }
        }


        while(!q.isEmpty()){
            int u=q.poll();
            res++;

            for(int v:graph.get(u)){
                if(v==i || !visit.add(v)) continue;

                q.offer(v);
            }

        }


        return res;
    }
}
